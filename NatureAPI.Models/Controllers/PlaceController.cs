using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using NatureAPI.Models;
using NatureAPI.Models.DTOs;
using NatureAPI.Models.Entities;

namespace NatureAPI.Models.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class PlaceController : ControllerBase
    {
        private readonly NatureDBContext _context;
        public PlaceController(NatureDBContext context)
        {
            _context = context;
        }
        
        
        [HttpPost]
        public async Task<ActionResult> CreatePlace([FromBody] PlaceCDTO placeDto)
        {
            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            var newPlace = new Place
            {
                // ID is generated by DB, donâ€™t set it manually
                Name = placeDto.Name,
                Description = placeDto.Description,
                Category = placeDto.Category,
                Latitude = placeDto.Latitude,
                Longitude = placeDto.Longitude,
                ElevationMeters = placeDto.ElevationMeters,
                Accessible = placeDto.Accessible,
                EntryFee = placeDto.EntryFee,
                OpeningHours = placeDto.OpeningHours,
                CreatedAt = DateTime.UtcNow
            };

            _context.Place.Add(newPlace);
            await _context.SaveChangesAsync();

            // return the created resource with its new Id
            return Ok();
        }
        
        
        
        
        
        // easy, Moderate
        // nature
        [HttpGet]
        public async Task<ActionResult<IEnumerable<PlaceRDTO>>> GetAllPlaces(
            [FromQuery] string category = null,
            [FromQuery] string difficulty = null)
        {
            // Start with all places
            var query = _context.Place.AsQueryable();

            // Filter by category if provided 
            if (!string.IsNullOrEmpty(category))
                query = query.Where(p => p.Category == category);

            // Filter by difficulty if provided (via Trails)
            if (!string.IsNullOrEmpty(difficulty))
                query = query.Where(p => p.Trails.Any(t => t.Difficulty == difficulty));

            // Project to DTO
            var places = await query
                .Select(p => new PlaceRDTO
                {
                    Id = p.Id,
                    Name = p.Name,
                    Description = p.Description,
                    Category = p.Category,
                    Latitude = p.Latitude,
                    Longitude = p.Longitude,
                    ElevationMeters = p.ElevationMeters,
                    Accessible = p.Accessible,
                    EntryFee = p.EntryFee,
                    OpeningHours = p.OpeningHours,
                    CreatedAt = p.CreatedAt
                })
                .ToListAsync();

            return Ok(places);
        }

        
        
        
        
      [HttpGet("all")] 
   public async Task<IActionResult> GetAllPlaces() 
   { 
       var place = await _context.Place.ToListAsync(); 
       return Ok(place); 
   } 
 
   // GET: api/Trail/all 
   [HttpGet("allTrails")] 
   public async Task<IActionResult> GetAllTrails() 
   { 
       var trails = await _context.Trail 
           .Include(t => t.Place) 
           .ToListAsync(); 
 
       var trailDTOs = trails.Select(t => new TrailRDTO 
       { 
           Id = t.Id, 
           Name = t.Name, 
           DistanceKm = t.DistanceKm, 
           EstimatedTimeMinutes = t.EstimatedTimeMinutes, 
           Difficulty = t.Difficulty, 
           Path = t.Path, 
           IsLoop = t.IsLoop, 
           Place = new PlaceDTO 
           { 
               Id = t.Place.Id, 
               Name = t.Place.Name, 
               Accessible = t.Place.Accessible 
           } 
       }); 
 
       return Ok(trailDTOs); 
   } 
 
 
 
 
   [HttpGet("{id}")] 
   public async Task<ActionResult<PlaceRDTO>> GetPlaceById(int id) 
   { 
       var place = await _context.Place 
           .Where(p => p.Id == id) 
           .Select(p => new PlaceRDTO 
           { 
               Id = p.Id, 
               Name = p.Name, 
               Description = p.Description, 
               Category = p.Category, 
               Latitude = p.Latitude, 
               Longitude = p.Longitude, 
               ElevationMeters = p.ElevationMeters, 
               Accessible = p.Accessible, 
               EntryFee = p.EntryFee, 
               OpeningHours = p.OpeningHours, 
               CreatedAt = p.CreatedAt, 
 
               Photos = p.Photos.Select(ph => new PhotoDTO 
               { 
                   Id = ph.Id, 
                   Url = ph.Url 
               }).ToList(), 
 
               Amenities = p.PlaceAmenities 
                   .Select(pa => new AmenityDTO 
                   { 
                       Id = pa.Amenity.Id, 
                       Name = pa.Amenity.Name 
                   }).ToList(), 
 
               Trails = p.Trails 
                   .Select(t => new TrailRDTO 
                   { 
                       Id = t.Id, 
                       Name = t.Name, 
                       DistanceKm = t.DistanceKm, 
                       Difficulty = t.Difficulty, 
                       EstimatedTimeMinutes = t.EstimatedTimeMinutes, 
                       IsLoop = t.IsLoop 
                   }).ToList() 
           }) 
           .FirstOrDefaultAsync(); 
 
       if (place == null) 
           return NotFound(); 
 
       return Ok(place); 
   } 
}   
        
        
    }
    
    
    
