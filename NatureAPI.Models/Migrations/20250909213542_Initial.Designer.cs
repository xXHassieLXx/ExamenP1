// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NatureAPI.Models;

#nullable disable

namespace NatureAPI.Models.Migrations
{
    [DbContext(typeof(NatureDBContext))]
    [Migration("20250909213542_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AmenityPlace", b =>
                {
                    b.Property<int>("AmenitiesId")
                        .HasColumnType("int");

                    b.Property<int>("PlacesId")
                        .HasColumnType("int");

                    b.HasKey("AmenitiesId", "PlacesId");

                    b.HasIndex("PlacesId");

                    b.ToTable("AmenityPlace");
                });

            modelBuilder.Entity("NatureAPI.Models.Entities.Amenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Amenity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Restroom"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Parking"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Restaurant"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Viewpoint"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Camping Area"
                        });
                });

            modelBuilder.Entity("NatureAPI.Models.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Photo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PlaceId = 1,
                            Url = "https://rivieramaya.mx/fotos/2020/11/cenote-azul-tulum.jpg"
                        },
                        new
                        {
                            Id = 2,
                            PlaceId = 1,
                            Url = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQG1YpDTVj2MYA94FYZETCnZa8yxQ_AXyZxBA&s"
                        },
                        new
                        {
                            Id = 3,
                            PlaceId = 2,
                            Url = "https://encrypted-tbn0.gstatic.com/licensed-image?q=tbn:ANd9GcTCAIwPvRenbX3NFdS_xlKhrvMBSVwYAp52-PQvZxjkB6uRww6uoLtL99Lc52PRxvt3hnEu29lcIP_PjCFu5zWBMK-pcmsutvBm2-NTDw"
                        },
                        new
                        {
                            Id = 4,
                            PlaceId = 2,
                            Url = "https://lh3.googleusercontent.com/gps-cs-s/AC9h4nqaEJgVpFFh6K9n69psf0kbOmizOGaZt0t4AxxCkOGfpnwmTecctwPdwOniRWUvdDx5aAELs1cyJpOGiyrTTJUYwTWP5ise_nVlLV3sMnGoG4wJzby7MI2-mZJu6oIY6UNbpvEy8w=w1080-h624-n-k-no"
                        },
                        new
                        {
                            Id = 5,
                            PlaceId = 3,
                            Url = "https://lh3.googleusercontent.com/gps-cs-s/AC9h4npPG6jc703Ex8VKyyehRbShbUyGxv17nadJNJ46DPZMtagDFKl2h3Mg_co6_fVn70WnI00afnBFKNRGkdh213L5DCj-sC5xYz75fWx3awET6jTcyBRi9b7Pscv3hZagrvUgOs5M=w135-h156-n-k-no"
                        },
                        new
                        {
                            Id = 6,
                            PlaceId = 3,
                            Url = "https://img.freepik.com/premium-vector/boiling-water-red-pot-cooking-pan-stove-with-water-steam-vector-illustration_163786-921.jpg?semt=ais_hybrid&w=740&q=80"
                        });
                });

            modelBuilder.Entity("NatureAPI.Models.Entities.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Accessible")
                        .HasColumnType("bit");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ElevationMeters")
                        .HasColumnType("int");

                    b.Property<double>("EntryFee")
                        .HasColumnType("float");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpeningHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Place");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Accessible = true,
                            Category = "Nature",
                            CreatedAt = new DateTime(2025, 9, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A beautiful natural swimming hole with crystal-clear water in the heart of Quintana Roo.",
                            ElevationMeters = 5,
                            EntryFee = 100.0,
                            Latitude = 20.582100000000001,
                            Longitude = -87.121499999999997,
                            Name = "Cenote Azul",
                            OpeningHours = "08:00 - 17:00"
                        },
                        new
                        {
                            Id = 2,
                            Accessible = true,
                            Category = "Historical",
                            CreatedAt = new DateTime(2025, 9, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Historic pre-Hispanic pyramids near Mexico City, a must-see archaeological site.",
                            ElevationMeters = 2300,
                            EntryFee = 85.0,
                            Latitude = 19.692499999999999,
                            Longitude = -98.843800000000002,
                            Name = "Teotihuacan Pyramids",
                            OpeningHours = "09:00 - 17:00"
                        },
                        new
                        {
                            Id = 3,
                            Accessible = true,
                            Category = "Nature",
                            CreatedAt = new DateTime(2025, 9, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Famous rock formations that resemble waterfalls, with natural mineral pools in Oaxaca.",
                            ElevationMeters = 1800,
                            EntryFee = 50.0,
                            Latitude = 16.873200000000001,
                            Longitude = -96.450000000000003,
                            Name = "Hierve el Agua",
                            OpeningHours = "07:00 - 18:00"
                        });
                });

            modelBuilder.Entity("NatureAPI.Models.Entities.PlaceAmenity", b =>
                {
                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<int>("AmenityId")
                        .HasColumnType("int");

                    b.HasKey("PlaceId", "AmenityId");

                    b.HasIndex("AmenityId");

                    b.ToTable("PlaceAmenity");

                    b.HasData(
                        new
                        {
                            PlaceId = 1,
                            AmenityId = 1
                        },
                        new
                        {
                            PlaceId = 1,
                            AmenityId = 2
                        },
                        new
                        {
                            PlaceId = 1,
                            AmenityId = 4
                        },
                        new
                        {
                            PlaceId = 2,
                            AmenityId = 1
                        },
                        new
                        {
                            PlaceId = 2,
                            AmenityId = 2
                        },
                        new
                        {
                            PlaceId = 2,
                            AmenityId = 3
                        },
                        new
                        {
                            PlaceId = 3,
                            AmenityId = 1
                        },
                        new
                        {
                            PlaceId = 3,
                            AmenityId = 5
                        },
                        new
                        {
                            PlaceId = 3,
                            AmenityId = 4
                        });
                });

            modelBuilder.Entity("NatureAPI.Models.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("NatureAPI.Models.Entities.Trail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DistanceKm")
                        .HasColumnType("float");

                    b.Property<int>("EstimatedTimeMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("IsLoop")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Trail");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Difficulty = "Easy",
                            DistanceKm = 2.5,
                            EstimatedTimeMinutes = 60,
                            IsLoop = true,
                            Name = "Cenote Azul Loop",
                            Path = "encoded_path_1",
                            PlaceId = 1
                        },
                        new
                        {
                            Id = 2,
                            Difficulty = "Moderate",
                            DistanceKm = 3.2000000000000002,
                            EstimatedTimeMinutes = 90,
                            IsLoop = false,
                            Name = "Riverside Trail",
                            Path = "encoded_path_2",
                            PlaceId = 1
                        },
                        new
                        {
                            Id = 3,
                            Difficulty = "Easy",
                            DistanceKm = 1.5,
                            EstimatedTimeMinutes = 45,
                            IsLoop = true,
                            Name = "Pyramid Base Walk",
                            Path = "encoded_path_3",
                            PlaceId = 2
                        },
                        new
                        {
                            Id = 4,
                            Difficulty = "Moderate",
                            DistanceKm = 2.7999999999999998,
                            EstimatedTimeMinutes = 70,
                            IsLoop = false,
                            Name = "Avenue of the Dead Walk",
                            Path = "encoded_path_4",
                            PlaceId = 2
                        },
                        new
                        {
                            Id = 5,
                            Difficulty = "Moderate",
                            DistanceKm = 1.8,
                            EstimatedTimeMinutes = 50,
                            IsLoop = true,
                            Name = "Upper Falls Trail",
                            Path = "encoded_path_5",
                            PlaceId = 3
                        },
                        new
                        {
                            Id = 6,
                            Difficulty = "Easy",
                            DistanceKm = 2.2999999999999998,
                            EstimatedTimeMinutes = 65,
                            IsLoop = false,
                            Name = "Mineral Pools Trail",
                            Path = "encoded_path_6",
                            PlaceId = 3
                        });
                });

            modelBuilder.Entity("AmenityPlace", b =>
                {
                    b.HasOne("NatureAPI.Models.Entities.Amenity", null)
                        .WithMany()
                        .HasForeignKey("AmenitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NatureAPI.Models.Entities.Place", null)
                        .WithMany()
                        .HasForeignKey("PlacesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NatureAPI.Models.Entities.Photo", b =>
                {
                    b.HasOne("NatureAPI.Models.Entities.Place", "Place")
                        .WithMany("Photos")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("NatureAPI.Models.Entities.PlaceAmenity", b =>
                {
                    b.HasOne("NatureAPI.Models.Entities.Amenity", "Amenity")
                        .WithMany("PlaceAmenities")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NatureAPI.Models.Entities.Place", "Place")
                        .WithMany("PlaceAmenities")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("NatureAPI.Models.Entities.Review", b =>
                {
                    b.HasOne("NatureAPI.Models.Entities.Place", "Place")
                        .WithMany("Reviews")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("NatureAPI.Models.Entities.Trail", b =>
                {
                    b.HasOne("NatureAPI.Models.Entities.Place", "Place")
                        .WithMany("Trails")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("NatureAPI.Models.Entities.Amenity", b =>
                {
                    b.Navigation("PlaceAmenities");
                });

            modelBuilder.Entity("NatureAPI.Models.Entities.Place", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("PlaceAmenities");

                    b.Navigation("Reviews");

                    b.Navigation("Trails");
                });
#pragma warning restore 612, 618
        }
    }
}
